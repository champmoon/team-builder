version: '3.9'

services:
  tb_api:
    build:
      context: ..
      target: production
      dockerfile: docker/Dockerfile
    container_name: tb_api
    volumes:
      - ../app:/tb/app
      - ../migrations:/tb/migrations
      - ../static:/tb/static
    env_file:
      - ../.env
    environment:
      - POSTGRES_HOST=tb_db
      - REDIS_HOST=tb_cache
    depends_on:
      - tb_db
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    tty: true
    networks:
      - tb_network

  tb_db:
    image: postgres:15-alpine
    container_name: tb_db
    command: -p ${POSTGRES_PORT}
    volumes:
      - tb_postgres_data:/var/lib/postgresql/data
    env_file:
      - ../.env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - tb_network

  tb_cache:
    image: redis:7-alpine
    container_name: tb_cache
    env_file: ../.env
    command: redis-server --requirepass ${REDIS_PASSWORD} --port ${REDIS_PORT} --include /usr/local/etc/redis/redis.conf
    volumes:
      - .././redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - tb_network

  init-dhparams:
    image: docker.io/certbot/certbot
    restart: "no"
    entrypoint: /bin/sh
    command: -c 'test -f /etc/letsencrypt/ssl-dhparams.pem || openssl dhparam -out /etc/letsencrypt/ssl-dhparams.pem 4096'
    volumes:
      - cert_volume:/etc/letsencrypt:Z
    networks:
      - tb_network

  certbot-oneshot:
    image: docker.io/certbot/certbot
    restart: "no"
    entrypoint: /bin/sh
    command: -c 'test -d /etc/letsencrypt/live/tbuilder.pro || certbot certonly --standalone --register-unsafely-without-email -d "tbuilder.pro" --rsa-key-size ${rsa_key_size:-2048} --agree-tos --force-renewal'
    ports:
      - 80:80
    volumes:
      - cert_volume:/etc/letsencrypt:Z
    networks:
      - tb_network

  nginx:
    build:
      context: ../nginx
    entrypoint: /bin/sh
    command: -c 'while :; do sleep 6h && wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'
    configs:
      - source: nginx-defaultserver
        target: /etc/nginx/conf.d/default.conf
    ports:
      - 80:80
      - 443:443
    depends_on:
      init-dhparams:
        condition: service_completed_successfully
        required: true
      certbot-oneshot:
        condition: service_completed_successfully
        required: true
      tb_api:
        condition: service_started
        required: true
    volumes:
      - cert_volume:/etc/letsencrypt:Z
      - acme_challenge:/usr/share/nginx/html/.well-known:Z
    networks:
      - tb_network

  certbot:
    image: docker.io/certbot/certbot
    entrypoint: /bin/sh
    command: -c 'trap exit TERM; while :; do certbot renew; sleep 24h && wait $${!}; done;'
    depends_on:
      nginx:
        condition: service_started
        required: true
    volumes:
      - cert_volume:/etc/letsencrypt:Z
      - acme_challenge:/usr/share/nginx/html/.well-known:Z
    networks:
      - tb_network

volumes:
  cert_volume: {}
  acme_challenge: {}
  tb_postgres_data:


configs:
  nginx-defaultserver:
    content: |
      upstream tb_server {
        server tb_api:8000;
      }

      server {
        server_name tbuilder.pro;
        listen       443 ssl http2;

        # мы уже примонтировали сертификаты в Docker Compose
        ssl_certificate     /etc/letsencrypt/live/tbuilder.pro/cert.pem;
        ssl_certificate_key /etc/letsencrypt/live/tbuilder.pro/key.pem;

        location / {
            proxy_pass http://tb_server;
        }
        
        location /.well-known {
            root /usr/share/nginx/html;
        }
      }

      server {
        listen 80;

        server_name tbuilder.pro;
        charset utf-8;

        return 301 https://$host$request_uri;
      }

networks:
  tb_network:
